# k3d configuration file, saved as e.g. /home/me/myk3dcluster.yaml
apiVersion: k3d.io/v1alpha2  # this will change in the future as we make everything more stable
kind: Simple  # internally, we also have a Cluster config, which is not yet available externally
name: mycluster  # name that you want to give to your cluster (will still be prefixed with `k3d-`)
servers: 1  # same as `--servers 1`
agents: 1  # same as `--agents 1`
kubeAPI:  # same as `--api-port 127.0.0.1:8079`
  # host: "myhost.my.domain"
  hostIP: "127.0.0.1"
  hostPort: "8079"
ports:
  - port: 8080:8080  # same as `--port 8080:80@loadbalancer
    nodeFilters:
      - loadbalancer
  # - port: 30000-35565:30000-35565  # same as `--port 8080:80@loadbalancer
  #   nodeFilters:
  #     - loadbalancer
  # - port: 80-8089:80-8089  # same as `--port 8080:80@loadbalancer
  #   nodeFilters:
  #     - loadbalancer
# options:
#   k3d:  # k3d runtime settings
#     wait: true  # wait for cluster to be usable before returining; same as `--wait` (default: true)
#     timeout: "60s"  # wait timeout before aborting; same as `--timeout 60s`
#   k3s:  # options passed on to K3s itself
#     extraServerArgs:  # additional arguments passed to the `k3s server` command
#       - --tls-san=my.host.domain
#     extraAgentArgs: []  # addditional arguments passed to the `k3s agent` command
#   kubeconfig:
#     updateDefaultKubeconfig: true  # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
# switchCurrentContext: true  # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)